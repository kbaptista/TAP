(*** Exercice  1  ***)
 
type 'a vertex = V of 'a
and 'a graph_full = Graph of ('a vertex * 'a vertex list) list;;
 
type 'k key = K of 'k
and ('k, 'a) vertex = 'k key * 'a 
and ('k, 'a) graph = Graph of (('k, 'a) vertex * 'k key list) list;;
 
Graph ([
  ((K 1, "Sapristi"), [K 2;K 3;K 4]);
  ((K 2, "Saperlotte"), [K 1;K 3]);
  ((K 3, "Sacrebleu"), [K 1;K 2]);
  ((K 4, "Sacristin"), [K 1]);
       ])
 
(*** Exercice  2  ***)
 
type 'k key = K of 'k
and ('k, 'a) vertex = 'k key * 'a 
and ('k, 'a) graph = Graph of (('k, 'a) vertex * 'k key list) list;;
 
Graph ([
         ((K 1, "Sommet"), [K 2; K 3]);
         ((K 2, ""), [K 4; K 5]);
         ((K 3, ""), [K 6; K 7]);
         ((K 4, ""), []);
         ((K 5, ""), []);
         ((K 6, ""), []);
         ((K 7, ""), []);
       ])
 
type 'a strategy = Strategy of ('a -> 'a list -> 'a list -> 'a list)
 
(*** Exercice  3  ***)
 
type 'a set = Set of ('a -> bool)
 
let set_even = Set (fun x -> (x mod 2) == 0);;
let set_contains_0 (Set s) = s 0;;  (* pattern-matching *)
 
let ( +| ) (Set s1) (Set s2) = Set (fun y -> s1 y || s2 y);;  
let ( *| ) (Set s1) (Set s2) = Set (fun y -> s1 y && s2 y);; 
 
(*** Exercice  4  ***)
 
type point2D = Point2D of float * float;;
 
let set_draw_wh width height s =
  let im = Array.make_matrix height width Graphics.black in 
    for j = 0 to height - 1 do
      for i = 0 to width - 1 do
        if set_mem s (Point2D (float i, float j)) then 
          im.(height - 1 - j).(i) <- Graphics.white
      done
    done;
    Graphics.draw_image (Graphics.make_image im) 0 0;;

let set_draw = set_draw_wh 200 200;;
 
let distance (Point2D(x1,y1)) (Point2D(x2,y2)) = 
  sqrt((x1-.x2)**2. +. (y1-.y2)**2.);;

let translate deltax deltay = 
  fun (Point2D (x, y)) -> Point2D (x +. deltax, y +. deltay);;
let scale a b = 
  fun (Point2D(x, y)) -> Point2D (x *. a, y *. b);;
let rotate theta = 
  let costheta = cos theta and sintheta = sin theta in
    fun (Point2D (x, y)) -> 
      Point2D (x *. costheta -. y *. sintheta, 
               y *. costheta +. x *. sintheta);;
 
let ( % ) f g x = f (g x);;   (* generic composition *)
(* Rotation relative to a point *)
let set_rotate_rel (Set s) theta (Point2D (cen_x, cen_y)) = 
      Set (s % (translate (cen_x) (cen_y)) % 
       (rotate theta) %  
       (translate (-.cen_x) (-.cen_y)));;

let wheel s (Point2D (cen_x, cen_y) as p) n =
      let theta = 2. *. 3.1415927 /. (float n) in
      let rec all_rot i =
        if i >= n then [] else
          (set_rotate_rel s (theta *. (float i)) p) :: (all_rot (i+1))
      in List.fold_left ( +-| ) set_all (all_rot 0);;
 
(*** Exercice  5  ***)
 
type 'a frozen_flow = 
| End of 'a
| Step of (unit -> 'a frozen_flow);;
 
let ppcm x y =
  let rec ppcm_rec x y mul = 
    if (y > x) then (ppcm_rec y x mul) else (* Ensures x >= y *)
    if (x = 0) then 0 else                  (* Ensures both are positive *)
      let r = (x mod y) in 
        if (r = 0) then (mul/y) else ppcm_rec y r mul
  in ppcm_rec x y (x*y);;
 
type ('key,'data) frozen_data_flow = 
| End of 'data
| Step of (unit -> (('key*'data) list) * ('key,'data) frozen_data_flow);;

 
